<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <!-- Gleiche Version von Camunda verwenden wie das e-Umzug-Projekt selbst -->
    <parent>
        <groupId>org.camunda.bpm.webapp</groupId>
        <artifactId>camunda-webapp-ee-root</artifactId>
        <version>7.10.1-ee</version>
    </parent>
    
    <groupId>ch.zhaw.gpi</groupId>
    <artifactId>be-services-webapp-webjar</artifactId>
    <name>BEservices Plattform</name>
    <packaging>jar</packaging>
    
    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>

        <skipTests>true</skipTests>
        
        <camunda.version>7.10.1</camunda.version>
        
        <!-- Steuert, ob die Enterprise-Version von Camunda benutzt wird ("-ee" schreiben
        oder die Community-Version (leer lassen). Weitere Bedingung:
        Es sind Credentials zum Camunda-EE-Repository erforderlich (siehe ganz unten) -->
        <camunda.enable.ee>-ee</camunda.enable.ee>
        
        <!-- Es sind keine Tests erforderlich -->
        <skipTests>true</skipTests>

        <!-- Verschiedene Eigenschaften, welche innerhalb dieses Pom-Files als auch innerhalb von CSS- und JS-Dateien genutzt werden -->
        <!-- Zusätzliche Sprache (Deutsch). Muss in https://github.com/camunda/camunda-webapp-translations existieren -->
        <CUSTOM_LANG>de</CUSTOM_LANG>
        
        <!-- Namen der Applikation und des Herstellers, ausgelesen in den config.js-Dateien -->
        <CUSTOM_VENDOR_NAME>BEservices</CUSTOM_VENDOR_NAME>
        <CUSTOM_WELCOME_TITLE>Start</CUSTOM_WELCOME_TITLE>		
        <CUSTOM_TASKLIST_TITLE>Angebote</CUSTOM_TASKLIST_TITLE>
        <CUSTOM_COCKPIT_TITLE>Cockpit</CUSTOM_COCKPIT_TITLE>
        <CUSTOM_ADMIN_TITLE>Admin</CUSTOM_ADMIN_TITLE>

        <!-- Farben, Abstände, usw. für verschiedene Elemente, ausgelesen in den user-styles.css-Dateien -->
        <CUSTOM_COLOR_LINES>#ED1C24</CUSTOM_COLOR_LINES>
        <CUSTOM_COLOR_LINKS>#ED1C24</CUSTOM_COLOR_LINKS>
        <CUSTOM_COLOR_TEXT>#000000</CUSTOM_COLOR_TEXT>
        <CUSTOM_LOGO_BACKGROUND_SIZE>30px</CUSTOM_LOGO_BACKGROUND_SIZE>
        <CUSTOM_LOGO_BACKGROUND_POSITION>0 6px</CUSTOM_LOGO_BACKGROUND_POSITION>
        <CUSTOM_LOGO_WIDTH>30px</CUSTOM_LOGO_WIDTH>
        <BRAND_NAME_WIDTH>15em</BRAND_NAME_WIDTH>
    </properties>

    <dependencies>
        <!-- Von den Webapps benötigen wir die das mit classes benannte Subset an Dateien -->
        <dependency>
            <groupId>org.camunda.bpm.webapp</groupId>
            <artifactId>camunda-webapp</artifactId>
            <type>jar</type>
            <classifier>classes</classifier>
        </dependency>
        <!-- Falls Enterprise Version, dann benötigen wir auch die Plugins. Ansonsten diesen Teil auskommentieren -->
        <dependency>
                <groupId>org.camunda.bpm.webapp</groupId>
                <artifactId>camunda-webapp-ee-plugins</artifactId>
                <version>${project.version}</version>
                <type>jar</type>
                <classifier>classes</classifier>
        </dependency>
        <!-- Und schliesslich benötigen wir das WebJAR, wobei dieses als optional gekennzeichnet wird, weil die aufrufenden Projekte dadurch wissen, dass sie es nicht zwingend als Abhängigkeit benötigen. Warum? Weil wir es ja anschliessend selbst in Form dieses Projekts ausgeben -->
        <dependency>
            <groupId>org.camunda.bpm.webapp</groupId>
            <artifactId>camunda-webapp-webjar${camunda.enable.ee}</artifactId>
            <type>jar</type>
            <optional>true</optional>
        </dependency>
    </dependencies>

    <!-- Konfiguration des Build-Vorgangs -->
    <build>
        <!-- Damit die Versions-Nummer nicht im ausgegebenen Artifakt-Namen ist (wäre Standard) nur den Artifakt-Namen selbst ausgeben -->
        <finalName>${project.artifactId}</finalName>
        
        <!-- Alle CSS und JS-Dateien aus src\main\resources sollen im Build enthalten sein und zudem die Platzhalter (z.B. ${CAMUNDA_TASKLIST_APP}) mit den entsprechenden Properties ersetzt werden (Filtering = true). Die übrigen Dateien (z.B. app/welcome/locales/de.json) sollen ungefiltert kopiert werden. -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*.css</include>
                    <include>**/*.js</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
                <excludes>
                    <exclude>**/*.css</exclude>
                    <exclude>**/*.js</exclude>
                </excludes>
            </resource>
        </resources>

        <!-- Alle übrigen Ressourcen kommen über andere Wege in das endültige WebJAR, mit verschiedenen Maven-Plugins: -->
        <plugins>
            <!-- Das originale WebJAR soll zunächst entpackt werden (goal unpack), wobei user-styles.css nicht überschrieben werden sollen (diese kommen ja von uns) -->
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>unpack</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.camunda.bpm.webapp</groupId>
                                    <artifactId>camunda-webapp-webjar${camunda.enable.ee}</artifactId>
                                    <version>${project.version}</version>
                                    <type>jar</type>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${project.build.outputDirectory}</outputDirectory>
                                    <includes>META-INF/resources/**</includes>
                                    <excludes>**/user*.css</excludes>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Sprachdateien aus dem camunda-webapp-translations-Github-Repository herunterladen über das dowload-maven-plugin -->
            <plugin>
                <groupId>com.googlecode.maven-download-plugin</groupId>
                <artifactId>download-maven-plugin</artifactId>
                <version>1.4.1</version>
                <executions>
                    <execution>
                        <id>translation-tasklist</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>https://github.com/camunda/camunda-webapp-translations/raw/master/tasklist/${CUSTOM_LANG}.json</url>
                            <outputDirectory>${project.build.outputDirectory}/META-INF/resources/webjars/camunda/app/tasklist/locales/</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>translation-cockpit</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>https://github.com/camunda/camunda-webapp-translations/raw/master/cockpit/${CUSTOM_LANG}.json</url>
                            <outputDirectory>${project.build.outputDirectory}/META-INF/resources/webjars/camunda/app/cockpit/locales/</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>translation-admin</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>https://github.com/camunda/camunda-webapp-translations/raw/master/admin/${CUSTOM_LANG}.json</url>
                            <outputDirectory>${project.build.outputDirectory}/META-INF/resources/webjars/camunda/app/admin/locales/</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>translation-welcome</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>https://github.com/camunda/camunda-webapp-translations/raw/master/welcome/${CUSTOM_LANG}.json</url>
                            <outputDirectory>${project.build.outputDirectory}/META-INF/resources/webjars/camunda/app/welcome/locales/</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Das eigene Logo (custom-logo.png) und das eigene Favicon (favicon.ico) ist für alle Webapps identisch. Daher ist es in einem separaten Ordner artwork gespeichert, von wo aus es für jede App in den assets/images-Ordner zu kopieren ist -->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>images-welcome</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.outputDirectory}/META-INF/resources/webjars/camunda/app/welcome/assets/images</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>artwork</directory>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>images-tasklist</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.outputDirectory}/META-INF/resources/webjars/camunda/app/tasklist/assets/images</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>artwork</directory>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>images-cockpit</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.outputDirectory}/META-INF/resources/webjars/camunda/app/cockpit/assets/images</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>artwork</directory>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>images-admin</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.outputDirectory}/META-INF/resources/webjars/camunda/app/admin/assets/images</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>artwork</directory>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Ohne die folgende Angaben versucht Maven mit JDK 5 zu kompilieren -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>11</source>
                    <target>11</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
    
    <!-- Damit auch die neuesten Patches der Camunda-Komponenten verfügbar sind, sollen
         die Komponenten nicht vom allgemeinen Maven-Repository https://mvnrepository.com
         geladen werden, sondern von den bei Camunda gehosteten Nexus-Repositories.
         Diese gibt es einerseits für die Community Edition (camunda-bpm-nexus) und
         für die Enterprise Edition (camunda-bpm-ee). Die Community Repository funktioniert
         out-of-the-box, da öffentlich zugänglich.

         Die Enterprise Repository benötigt
         hingegen Zugangsdaten, welche in einer Datei settings.xml im .m2-Verzeichnis
         eingefügt werden. Das .m2-Verzeichnis befindet sich auf einem Windows 10-
         Rechner in C:\Users\BENUTZERNAME\.m2. Der Inhalt von settings.xml sollte sein:
         <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
             <server>
                <id>camunda-bpm-ee</id>
                <username>BENUTZERNAME</username>
                <password>PASSWORT</password>
             </server>
            </servers>
           </settings> 
           
        Hat man diese Daten nicht, dann den ganzen Repositories-Block auskommentieren.
    -->
    <repositories>
        <repository>
            <id>camunda-bpm-ee</id>
            <name>camunda-bpm-ee</name>
            <url>https://app.camunda.com/nexus/content/repositories/camunda-bpm-ee</url>
        </repository>
    </repositories>
</project>
